var searchIndex = JSON.parse('{\
"sparrow":{"doc":"Sparrow is an implementation of TMSN for boosting.","i":[[5,"training","sparrow","Train a model",null,[[["string",3]]]],[5,"testing","","Test a model",null,[[["string",3]]]],[0,"head","","Implementation of the components running on head node,…",null,null],[5,"start_head","sparrow::head","Start the components resided in head node",null,[[["samplemode",4],["tree",3],["config",3],["vec",3]]]],[0,"model_manager","","Implementation of the model manager ",null,null],[5,"start_model_manager_async","sparrow::head::model_manager","",null,[[["sender",3],["tree",3],["config",3],["vec",3]]]],[0,"model_sync","","",null,null],[3,"ModelSync","sparrow::head::model_manager::model_sync","",null,null],[0,"packet_stats","","",null,null],[3,"PacketStats","sparrow::head::model_manager::model_sync::packet_stats","",null,null],[12,"avg_accept_rate","","",0,null],[12,"last_accept_rate","","",0,null],[12,"curr_condition","","",0,null],[12,"num_machines","","",0,null],[4,"UpdateSpeed","","",null,null],[13,"Okay","","",1,null],[13,"TooFast","","",1,null],[13,"TooSlow","","",1,null],[11,"new","","",0,[[],["packetstats",3]]],[11,"handle_new_packet","","",0,[[["packettype",4],["packet",3]]]],[11,"got_sufficient_packages","","",0,[[]]],[11,"is_same_trend","","",0,[[]]],[11,"is_opposite_trend","","",0,[[]]],[11,"reset","","",0,[[]]],[11,"print_log","","",0,[[]]],[11,"new","sparrow::head::model_manager::model_sync","",2,[[["sender",3],["tree",3],["gamma",3],["string",3],["vec",3]],["modelsync",3]]],[11,"run_with_network","","",2,[[["string",3],["vec",3]]]],[0,"scheduler","sparrow::head::model_manager","",null,null],[3,"Scheduler","sparrow::head::model_manager::scheduler","",null,null],[12,"grids_version","","",3,null],[0,"kdtree","","",null,null],[3,"KdTree","sparrow::head::model_manager::scheduler::kdtree","",null,null],[6,"Grid","","",null,null],[6,"Grids","","",null,null],[11,"new","","",4,[[["labeleddata",3],["vec",3]]]],[11,"get_leaves","","",4,[[],["grids",6]]],[11,"new","sparrow::head::model_manager::scheduler","",3,[[["string",3],["modelwithversion",3],["vec",3]],["scheduler",3]]],[11,"set_assignments","","",3,[[["modelwithversion",3]]]],[11,"handle_accept","","",3,[[["packet",3]]]],[11,"handle_empty","","",3,[[["packet",3]]]],[11,"refresh_grid","","",3,[[]]],[11,"print_log","","",3,[[["gamma",3]]]],[0,"sampler","sparrow::head","Implementation of the sampler ",null,null],[5,"start_sampler_async","sparrow::head::sampler","",null,[[["receiver",3],["samplemode",4],["tree",3],["config",3],["vec",3]],[["arc",3],["rwlock",3]]]],[0,"stratified_storage","","A stratified storage structor that organize examples on…",null,null],[3,"F64","sparrow::head::sampler::stratified_storage","",null,null],[12,"val","","",5,null],[3,"StratifiedStorage","","",null,null],[12,"node_counts","","",6,null],[0,"serial_storage","","",null,null],[3,"SerialStorage","sparrow::head::sampler::stratified_storage::serial_storage","A naive file loader",null,null],[12,"size","","",7,null],[11,"new","","",7,[[["string",3],["vec",3],["option",4]],["serialstorage",3]]],[11,"read_raw","","",7,[[],[["labeleddata",3],["vec",3]]]],[11,"read","","",7,[[],[["labeleddata",3],["vec",3]]]],[11,"load_to_memory","","",7,[[]]],[6,"WeightTableRead","sparrow::head::sampler::stratified_storage","",null,null],[6,"WeightTableWrite","","",null,null],[6,"CountTableRead","","",null,null],[6,"CountTableWrite","","",null,null],[17,"SPEED_TEST","","",null,null],[11,"new","","Create the stratified storage structure.",6,[[["string",3],["receiver",3],["arc",3],["samplemode",4],["tree",3],["rwlock",3]],["stratifiedstorage",3]]],[11,"init_stratified_from_file","","",6,[[["string",3],["vec",3],["bins",3],["tree",3]]]],[0,"scanner","sparrow","Implementation of the scanner ",null,null],[5,"start","sparrow::scanner","",null,[[["samplemode",4],["tree",3],["config",3],["vec",3]]]],[0,"booster","","The implementation of the AdaBoost algorithm with early…",null,null],[3,"Boosting","sparrow::scanner::booster","The boosting algorithm. It contains two functions, one for…",null,null],[0,"learner","","",null,null],[3,"TreeNode","sparrow::scanner::booster::learner","A weak rule with an edge larger or equal to the targetting…",null,null],[12,"prt_index","","",8,null],[12,"feature","","",8,null],[12,"threshold","","",8,null],[12,"predict","","",8,null],[12,"gamma","","",8,null],[12,"raw_martingale","","",8,null],[12,"sum_c","","",8,null],[12,"sum_c_squared","","",8,null],[12,"bound","","",8,null],[12,"num_scanned","","",8,null],[12,"fallback","","",8,null],[12,"positive","","",8,null],[12,"negative","","",8,null],[12,"positive_weight","","",8,null],[12,"negative_weight","","",8,null],[3,"Learner","","Statisitics of all weak rules that are being evaluated.…",null,null],[12,"rho_gamma","","",9,null],[12,"expand_node","","",9,null],[12,"total_count","","",9,null],[6,"RuleStats","","",null,null],[17,"NUM_PREDS","","",null,null],[17,"PREDS","","",null,null],[11,"write_log","","",8,[[]]],[11,"new","","Create a `Learner` that search for valid weak rules.…",9,[[["vec",3],["bins",3]],["learner",3]]],[11,"reset","","Reset the statistics of all candidate weak rules (except…",9,[[]]],[11,"get_max_empirical_ratio_tree_node","","",9,[[],["treenode",3]]],[11,"is_gamma_significant","","",9,[[]]],[11,"update","","Update the statistics of all candidate weak rules using…",9,[[["tree",3]],[["treenode",3],["option",4]]]],[11,"set_gamma","","",9,[[]]],[11,"set_expand_node","","",9,[[]]],[0,"learner_helpers","sparrow::scanner::booster","",null,null],[5,"preprocess_data","sparrow::scanner::booster::learner_helpers","",null,[[["tree",3]],["vec",3]]],[5,"find_tree_node","","",null,[[["bins",3],["vec",3],["vec",3]],[["treenode",3],["option",4]]]],[5,"gen_tree_node","","",null,[[],["treenode",3]]],[5,"get_base_node","","",null,[[["bufferloader",3]]]],[17,"MODEL_SIG_PLACEHOLDER","sparrow::scanner::booster","",null,null],[11,"new","","Create a boosting training class.",10,[[["string",3],["vec",3],["bins",3],["tree",3],["bufferloader",3]],["boosting",3]]],[11,"enable_network","","Enable network communication. `name` is the name of this…",10,[[["string",3]]]],[11,"training","","Start training the boosting algorithm.",10,[[]]],[0,"buffer_loader","sparrow::scanner","A data loader with two independent caches. Alternatively,…",null,null],[3,"BufferLoader","sparrow::scanner::buffer_loader","Double-buffered sample set. It consists of two buffers…",null,null],[12,"size","","",11,null],[12,"base_model","","",11,null],[12,"base_model_sig","","",11,null],[12,"current_version","","",11,null],[12,"new_buffer","","",11,null],[12,"sample_mode","","",11,null],[12,"ess","","",11,null],[11,"new","","Create a new BufferLoader.",11,[[["string",3],["samplemode",4]],["bufferloader",3]]],[11,"get_num_batches","","Return the number of batches (i.e. the number of function…",11,[[]]],[11,"get_next_batch","","Read next batch of examples.",11,[[]]],[11,"get_next_batch_and_update","","",11,[[["tree",3]]]],[11,"try_switch","","",11,[[]]],[11,"check_ess_blocking","","",11,[[]]],[11,"reset_scores","","",11,[[]]],[11,"is_empty","","",11,[[]]],[11,"from","sparrow::head::model_manager::model_sync","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"try_into","","",2,[[],["result",4]]],[11,"vzip","","",2,[[]]],[11,"from","sparrow::head::model_manager::model_sync::packet_stats","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"try_into","","",0,[[],["result",4]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"try_into","","",1,[[],["result",4]]],[11,"vzip","","",1,[[]]],[11,"from","sparrow::head::model_manager::scheduler","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"try_into","","",3,[[],["result",4]]],[11,"vzip","","",3,[[]]],[11,"from","sparrow::head::model_manager::scheduler::kdtree","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"try_into","","",4,[[],["result",4]]],[11,"vzip","","",4,[[]]],[11,"from","sparrow::head::sampler::stratified_storage","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"try_into","","",6,[[],["result",4]]],[11,"vzip","","",6,[[]]],[11,"from","sparrow::head::sampler::stratified_storage::serial_storage","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"try_into","","",7,[[],["result",4]]],[11,"vzip","","",7,[[]]],[11,"from","sparrow::scanner::booster","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"try_into","","",10,[[],["result",4]]],[11,"vzip","","",10,[[]]],[11,"from","sparrow::scanner::booster::learner","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"try_into","","",8,[[],["result",4]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"try_into","","",9,[[],["result",4]]],[11,"vzip","","",9,[[]]],[11,"from","sparrow::scanner::buffer_loader","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"try_into","","",11,[[],["result",4]]],[11,"vzip","","",11,[[]]],[11,"clone","sparrow::head::model_manager::model_sync::packet_stats","",1,[[],["updatespeed",4]]],[11,"clone","sparrow::head::sampler::stratified_storage","",5,[[],["f64",3]]],[11,"eq","sparrow::head::model_manager::model_sync::packet_stats","",1,[[["updatespeed",4]]]],[11,"eq","sparrow::head::sampler::stratified_storage","",5,[[["f64",3]]]],[11,"fmt","sparrow::head::model_manager::model_sync::packet_stats","",1,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::head::sampler::stratified_storage::serial_storage","",7,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::head::sampler::stratified_storage","",5,[[["formatter",3]],["result",6]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","sparrow::scanner::booster::learner","",9,[[],["result",4]]],[11,"deserialize","sparrow::head::sampler::stratified_storage","",5,[[],["result",4]]],[11,"deserialize","sparrow::scanner::booster::learner","",9,[[],["result",4]]]],"p":[[3,"PacketStats"],[4,"UpdateSpeed"],[3,"ModelSync"],[3,"Scheduler"],[3,"KdTree"],[3,"F64"],[3,"StratifiedStorage"],[3,"SerialStorage"],[3,"TreeNode"],[3,"Learner"],[3,"Boosting"],[3,"BufferLoader"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);