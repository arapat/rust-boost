var searchIndex = JSON.parse('{\
"sparrow":{"doc":"Sparrow is an implementation of TMSN for boosting.","i":[[5,"training","sparrow","",null,[[["string",3]]]],[5,"testing","","",null,[[["string",3]]]],[0,"commons","","Common functions and classes.",null,null],[5,"get_weight","sparrow::commons","",null,[[["example",6]]]],[5,"get_weights","","",null,[[["vec",3]],["vec",3]]],[5,"get_bound","","",null,[[]]],[5,"set_init_weight","","Set initial weights to the samples",null,[[["examplewithscore",6],["vec",3]],[["exampleinsampleset",6],["vec",3]]]],[5,"is_zero","","",null,[[]]],[5,"get_sign","","",null,[[]]],[0,"bins","","",null,null],[3,"Bins","sparrow::commons::bins","The percentiles of a specific feature dimension, which…",null,null],[5,"load_bins","","",null,[[["option",4],["config",3]],[["vec",3],["bins",3]]]],[11,"len","","Return the number of thresholds. ",0,[[]]],[11,"get_vals","","Return the vector of thresholds.",0,[[],["vec",3]]],[11,"get_split_index","","",0,[[],["tfeature",6]]],[0,"channel","sparrow::commons","",null,null],[3,"ChannelMonitor","sparrow::commons::channel","",null,null],[3,"Sender","","",null,null],[3,"Receiver","","",null,null],[5,"bounded","","",null,[[]]],[11,"send","","",1,[[]]],[11,"try_send","","",1,[[]]],[11,"is_full","","",1,[[]]],[11,"recv","","",2,[[],["option",4]]],[11,"try_recv","","",2,[[],["option",4]]],[11,"len","","",2,[[]]],[0,"io","sparrow::commons","",null,null],[5,"create_bufreader","sparrow::commons::io","",null,[[["string",3]],[["bufreader",3],["file",3]]]],[5,"create_bufwriter","","",null,[[["string",3]],[["bufwriter",3],["file",3]]]],[5,"raw_read_all","","",null,[[["string",3]],["string",3]]],[5,"read_all","","",null,[[["string",3]],["vec",3]]],[5,"write_all","","",null,[[["string",3]],["result",6]]],[5,"read_k_lines","","",null,[[["bufreader",3]],[["string",3],["vec",3]]]],[5,"read_k_labeled_data","","",null,[[["bufreader",3],["string",3]],[["vec",3],["labeleddata",3]]]],[5,"read_k_labeled_data_from_binary_file","","",null,[[["bufreader",3]],[["example",6],["vec",3]]]],[5,"write_to_binary_file","","",null,[[["example",6],["bufwriter",3]]]],[5,"load_s3","","",null,[[],["option",4]]],[5,"write_s3","","",null,[[]]],[5,"clear_s3_bucket","","",null,[[]]],[0,"labeled_data","sparrow::commons","",null,null],[3,"LabeledData","sparrow::commons::labeled_data","Training example. It consists of two fields: `feature` and…",null,null],[12,"feature","","",3,null],[12,"label","","",3,null],[11,"new","","",3,[[["vec",3]],["labeleddata",3]]],[0,"packet","sparrow::commons","",null,null],[3,"Packet","sparrow::commons::packet","",null,null],[12,"packet_signature","","",4,null],[12,"source_machine","","",4,null],[12,"source_machine_id","","",4,null],[12,"node_id","","",4,null],[12,"updates","","",4,null],[12,"gamma","","",4,null],[12,"sample_version","","",4,null],[12,"ess","","",4,null],[12,"base_model_signature","","",4,null],[12,"this_model_signature","","",4,null],[12,"fallback","","",4,null],[4,"PacketType","","",null,null],[13,"Accept","","",5,null],[13,"Fallback","","",5,null],[13,"SmallEffSize","","",5,null],[13,"AssignMismatch","","",5,null],[11,"new","","",4,[[["string",3],["string",3],["updatelist",3]],["packet",3]]],[11,"get_packet_type","","",4,[[["option",4]],["packettype",4]]],[0,"performance_monitor","sparrow::commons","",null,null],[3,"PerformanceMonitor","sparrow::commons::performance_monitor","",null,null],[11,"new","","",6,[[],["performancemonitor",3]]],[11,"reset","","",6,[[]]],[11,"start","","",6,[[]]],[11,"resume","","",6,[[]]],[11,"update","","",6,[[]]],[11,"pause","","",6,[[]]],[11,"write_log","","",6,[[]]],[11,"get_duration","","",6,[[]]],[11,"get_counts","","",6,[[]]],[0,"persistent_io","sparrow::commons","",null,null],[5,"write_sample_local","sparrow::commons::persistent_io","",null,[[["string",3],["vec",3],["model",6],["examplewithscore",6]]]],[5,"write_sample_s3","","",null,[[["string",3],["vec",3],["model",6],["examplewithscore",6]]]],[5,"load_sample","","",null,[[["lockedbuffer",6]]]],[5,"load_sample_local","","",null,[[],[["option",4],["versionedsamplemodel",6]]]],[5,"load_sample_s3","","",null,[[],[["option",4],["versionedsamplemodel",6]]]],[5,"write_model","","",null,[[["model",6]],["string",3]]],[5,"upload_model","","",null,[[["model",6],["string",3]]]],[5,"read_model","","",null,[[]]],[5,"download_model","","",null,[[["string",3]],[["option",4],["modelpack",6]]]],[5,"upload_assignments","","",null,[[["string",3],["vec",3]]]],[5,"download_assignments","","",null,[[["string",3]],[["vec",3],["option",4]]]],[5,"write_bins_disk","","",null,[[["vec",3]]]],[5,"write_bins_s3","","",null,[[["string",3],["vec",3]]]],[5,"read_bins_disk","","",null,[[],[["vec",3],["bins",3]]]],[5,"read_bins_s3","","",null,[[["string",3]],[["vec",3],["bins",3]]]],[6,"VersionedSampleModel","","",null,null],[6,"ModelPack","","",null,null],[6,"LockedBuffer","","",null,null],[0,"tree","sparrow::commons","",null,null],[3,"ADTree","sparrow::commons::tree","",null,null],[12,"tree_size","","",7,null],[12,"parent","","",7,null],[12,"children","","",7,null],[12,"depth","","",7,null],[12,"last_gamma","","",7,null],[12,"base_version","","",7,null],[12,"model_updates","","",7,null],[3,"UpdateList","","",null,null],[12,"size","","",8,null],[12,"parent","","",8,null],[12,"feature","","",8,null],[12,"threshold","","",8,null],[12,"evaluation","","",8,null],[12,"predicts","","",8,null],[12,"is_new","","",8,null],[11,"new","","",7,[[],["adtree",3]]],[11,"size","","",7,[[]]],[11,"add_nodes","","",7,[[["tfeature",6]]]],[11,"add_root","","",7,[[]]],[11,"add_grid","","",7,[[["grid",6]]]],[11,"get_prediction_tree","","",7,[[["example",6]]]],[11,"visit_tree","","",7,[[["example",6],["vec",3]]]],[11,"get_prediction","","",7,[[["example",6]]]],[11,"is_visited","","",7,[[["example",6]]]],[11,"get_leaf_index_prediction","","",7,[[["example",6]]]],[11,"append_patch","","",7,[[["updatelist",3]],["vec",3]]],[11,"get_conditions","","",7,[[],["vec",3]]],[11,"new","","",8,[[],["updatelist",3]]],[11,"get_prediction_ul","","",8,[[["example",6]]]],[11,"add","","",8,[[["vec",3],["tfeature",6]]]],[11,"create_slice","","",8,[[["range",3]],["updatelist",3]]],[6,"ExampleInSampleSet","sparrow::commons","",null,null],[6,"ExampleWithScore","","",null,null],[6,"Model","","",null,null],[17,"INIT_MODEL_PREFIX","","",null,null],[0,"config","sparrow","",null,null],[3,"Config","sparrow::config","Configuration for training and testing with Sparrow",null,null],[12,"training_filename","","File path to the training data",9,null],[12,"num_examples","","Number of training examples",9,null],[12,"num_features","","Number of features",9,null],[12,"positive","","Label for positive examples",9,null],[12,"testing_filename","","File path to the testing data",9,null],[12,"num_testing_examples","","Number of testing examples",9,null],[12,"max_sample_size","","Number of examples to scan for generating heuristic used…",9,null],[12,"max_bin_size","","Maximum number of bins for discretizing continous feature…",9,null],[12,"min_gamma","","Minimum value of the \\\\gamma of the generated tree nodes",9,null],[12,"default_gamma","","Default maximum value of the \\\\gamma for generating tree…",9,null],[12,"max_trials_before_shrink","","Maximum number of examples to scan before shrinking the…",9,null],[12,"min_ess","","Minimum effective sample size for triggering resample",9,null],[12,"min_grid_size","","minimum number of examples in a kd-tree node (grid)",9,null],[12,"num_trees","","Number of decision trees (i.e. second-layer tree nodes)",9,null],[12,"num_splits","","Maximum number of splits per tree",9,null],[12,"channel_size","","Maximum number of elements in the channel connecting…",9,null],[12,"buffer_size","","Number of examples in the sample set that needs to be…",9,null],[12,"batch_size","","Number of examples to process in each weak rule updates",9,null],[12,"serial_sampling","","Set to true to stop running sampler in the background of…",9,null],[12,"sampling_mode","","Sampling mode: Read/write from memory/local disk/S3",9,null],[12,"sampler_scanner","","Worker mode: could be \\\"scanner\\\", \\\"sampler\\\", or \\\"both\\\"",9,null],[12,"sleep_duration","","Sleep duration: the frequency of loading disk from…",9,null],[12,"num_examples_per_block","","Number of examples in a block on the stratified binary file",9,null],[12,"disk_buffer_filename","","File name for the stratified binary file",9,null],[12,"num_assigners","","Number of threads for putting examples back to correct…",9,null],[12,"num_samplers","","Number of threads for sampling examples from strata",9,null],[12,"network","","IP addresses of other machines in the network",9,null],[12,"port","","The network port used for parallel training",9,null],[12,"local_name","","Identifier for the local machine",9,null],[12,"exp_name","","Folder for writing data to S3",9,null],[12,"save_process","","Flag for keeping all intermediate models during training…",9,null],[12,"save_interval","","Number of iterations between persisting models on disk",9,null],[12,"debug_mode","","Flag for activating debug mode",9,null],[12,"models_table_filename","","(for validation only) the file names of the models to run…",9,null],[12,"incremental_testing","","Flag indicating if models are trained incrementally",9,null],[12,"testing_scores_only","","Flag for validation mode, set to true to output raw scores…",9,null],[12,"resume_training","","Continous training from an interupted training process",9,null],[4,"SampleMode","","",null,null],[13,"LOCAL","","",10,null],[13,"S3","","",10,null],[11,"new","","",9,[[["string",3]],["config",3]]],[11,"new","","",10,[[["string",3]],["samplemode",4]]],[0,"testing","sparrow","Validating models",null,null],[5,"validate","sparrow::testing","Validating a list of models",null,[[["string",3]]]],[0,"master","sparrow","",null,null],[5,"start_master","sparrow::master","",null,[[["model",6],["config",3],["samplemode",4],["vec",3]]]],[0,"model_manager","","",null,null],[5,"start_model_manager_async","sparrow::master::model_manager","",null,[[["model",6],["config",3],["sender",3],["vec",3]]]],[0,"model_sync","","",null,null],[3,"ModelSync","sparrow::master::model_manager::model_sync","",null,null],[0,"packet_stats","","",null,null],[3,"PacketStats","sparrow::master::model_manager::model_sync::packet_stats","",null,null],[12,"avg_accept_rate","","",11,null],[12,"last_accept_rate","","",11,null],[12,"curr_condition","","",11,null],[12,"num_machines","","",11,null],[4,"UpdateSpeed","","",null,null],[13,"Okay","","",12,null],[13,"TooFast","","",12,null],[13,"TooSlow","","",12,null],[11,"new","","",11,[[],["packetstats",3]]],[11,"handle_new_packet","","",11,[[["packet",3],["packettype",4]]]],[11,"got_sufficient_packages","","",11,[[]]],[11,"is_same_trend","","",11,[[]]],[11,"is_opposite_trend","","",11,[[]]],[11,"reset","","",11,[[]]],[11,"print_log","","",11,[[]]],[11,"new","sparrow::master::model_manager::model_sync","",13,[[["model",6],["vec",3],["sender",3],["string",3],["gamma",3]],["modelsync",3]]],[11,"run_with_network","","",13,[[["string",3],["vec",3]]]],[0,"scheduler","sparrow::master::model_manager","",null,null],[3,"Scheduler","sparrow::master::model_manager::scheduler","",null,null],[12,"grids_version","","",14,null],[0,"kdtree","","",null,null],[3,"KdTree","sparrow::master::model_manager::scheduler::kdtree","",null,null],[6,"Grid","","",null,null],[6,"Grids","","",null,null],[11,"new","","",15,[[["example",6],["vec",3]]]],[11,"get_leaves","","",15,[[],["grids",6]]],[11,"new","sparrow::master::model_manager::scheduler","",14,[[["modelwithversion",3],["string",3],["vec",3]],["scheduler",3]]],[11,"set_assignments","","",14,[[["modelwithversion",3]]]],[11,"handle_accept","","",14,[[["packet",3]]]],[11,"handle_fallback","","",14,[[["packet",3]]]],[11,"refresh_grid","","",14,[[]]],[11,"get_worker_assignment","","",14,[[],["option",4]]],[11,"print_log","","",14,[[["gamma",3]]]],[0,"sampler","sparrow::master","",null,null],[5,"start_sampler_async","sparrow::master::sampler","",null,[[["model",6],["receiver",3],["config",3],["samplemode",4],["vec",3]],[["arc",3],["rwlock",3]]]],[0,"stratified_storage","","A stratified storage structor that organize examples on…",null,null],[3,"F64","sparrow::master::sampler::stratified_storage","",null,null],[12,"val","","",16,null],[3,"StratifiedStorage","","",null,null],[12,"node_counts","","",17,null],[0,"serial_storage","","",null,null],[3,"SerialStorage","sparrow::master::sampler::stratified_storage::serial_storage","A naive file loader",null,null],[12,"size","","",18,null],[11,"new","","",18,[[["string",3],["option",4],["vec",3]],["serialstorage",3]]],[11,"read_raw","","",18,[[],[["rawexample",6],["vec",3]]]],[11,"read","","",18,[[],[["example",6],["vec",3]]]],[11,"load_to_memory","","",18,[[]]],[6,"WeightTableRead","sparrow::master::sampler::stratified_storage","",null,null],[6,"WeightTableWrite","","",null,null],[6,"CountTableRead","","",null,null],[6,"CountTableWrite","","",null,null],[17,"SPEED_TEST","","",null,null],[11,"new","","Create the stratified storage structure.",17,[[["string",3],["model",6],["samplemode",4],["receiver",3],["arc",3],["rwlock",3]],["stratifiedstorage",3]]],[11,"init_stratified_from_file","","",17,[[["string",3],["vec",3],["bins",3],["model",6]]]],[0,"scanner","sparrow","",null,null],[5,"start","sparrow::scanner","",null,[[["model",6],["config",3],["samplemode",4],["vec",3]]]],[0,"booster","","The implementation of the AdaBoost algorithm with early…",null,null],[3,"Boosting","sparrow::scanner::booster","The boosting algorithm. It contains two functions, one for…",null,null],[0,"learner","","",null,null],[3,"Learner","sparrow::scanner::booster::learner","",null,null],[12,"rho_gamma","","",19,null],[12,"expand_node","","",19,null],[12,"total_count","","",19,null],[17,"NUM_RULES","","",null,null],[17,"PREDS","","",null,null],[11,"new","","Create a `Learner` that search for valid weak rules.…",19,[[["vec",3],["bins",3]],["learner",3]]],[11,"reset","","Reset the statistics of all candidate weak rules (except…",19,[[]]],[11,"get_max_empirical_ratio_tree_node","","",19,[[],[["treenode",3],["option",4]]]],[11,"is_gamma_significant","","",19,[[]]],[11,"update","","Update the statistics of all candidate weak rules using…",19,[[["model",6]],[["treenode",3],["option",4]]]],[11,"set_gamma","","",19,[[]]],[11,"set_expand_node","","",19,[[]]],[0,"learner_helpers","sparrow::scanner::booster","",null,null],[5,"preprocess_data","sparrow::scanner::booster::learner_helpers","",null,[[["model",6]],["vec",3]]],[5,"find_tree_node","","",null,[[["bins",3],["vec",3],["vec",3]],[["treenode",3],["option",4]]]],[5,"gen_tree_node","","",null,[[["earlystoppingstatsatthreshold",3]],["treenode",3]]],[5,"get_base_node","","",null,[[["bufferloader",3]]]],[0,"learner_stats","sparrow::scanner::booster","",null,null],[3,"EarlyStoppingStatsAtThreshold","sparrow::scanner::booster::learner_stats","Statisitics of all weak rules that are being evaluated.…",null,null],[12,"weak_rules_score","","",20,null],[12,"sum_c","","",20,null],[12,"sum_c_squared","","",20,null],[12,"num_positive","","",20,null],[12,"num_negative","","",20,null],[12,"weight_positive","","",20,null],[12,"weight_negative","","",20,null],[12,"weight_squared","","",20,null],[3,"EarlyStoppingIntermediate","","",null,null],[12,"left_score","","",21,null],[12,"right_score","","",21,null],[12,"left_c","","",21,null],[12,"right_c","","",21,null],[12,"left_c_squared","","",21,null],[12,"right_c_squared","","",21,null],[6,"CandidateNodeStats","","",null,null],[6,"RuleStats","","",null,null],[11,"new","","",20,[[],["earlystoppingstatsatthreshold",3]]],[11,"new","","",21,[[["example",6]],["earlystoppingintermediate",3]]],[11,"zero","","",21,[[],["earlystoppingintermediate",3]]],[11,"add","","",21,[[["earlystoppingintermediate",3]]]],[11,"add_right","","",21,[[["earlystoppingintermediate",3]]]],[11,"move_to_left","","",21,[[["earlystoppingintermediate",3]]]],[0,"tree_node","sparrow::scanner::booster","",null,null],[3,"TreeNode","sparrow::scanner::booster::tree_node","A weak rule with an edge larger or equal to the targetting…",null,null],[12,"prt_index","","",22,null],[12,"feature","","",22,null],[12,"threshold","","",22,null],[12,"predict","","",22,null],[12,"gamma","","",22,null],[12,"raw_martingale","","",22,null],[12,"sum_c","","",22,null],[12,"sum_c_squared","","",22,null],[12,"bound","","",22,null],[12,"num_scanned","","",22,null],[12,"fallback","","",22,null],[12,"positive","","",22,null],[12,"negative","","",22,null],[12,"positive_weight","","",22,null],[12,"negative_weight","","",22,null],[11,"write_log","","",22,[[]]],[17,"MODEL_SIG_PLACEHOLDER","sparrow::scanner::booster","",null,null],[17,"VERBOSE","","",null,null],[11,"new","","Create a boosting training class.",23,[[["vec",3],["model",6],["config",3],["bins",3],["bufferloader",3]],["boosting",3]]],[11,"training","","Start training the boosting algorithm.",23,[[]]],[0,"buffer_loader","sparrow::scanner","A data loader with two independent caches. Alternatively,…",null,null],[3,"BufferLoader","sparrow::scanner::buffer_loader","Double-buffered sample set. It consists of two buffers…",null,null],[12,"size","","",24,null],[12,"base_model","","",24,null],[12,"base_model_sig","","",24,null],[12,"current_version","","",24,null],[12,"new_buffer","","",24,null],[12,"sample_mode","","",24,null],[12,"ess","","",24,null],[11,"new","","Create a new BufferLoader.",24,[[["string",3],["samplemode",4]],["bufferloader",3]]],[11,"get_num_batches","","Return the number of batches (i.e. the number of function…",24,[[]]],[11,"get_next_batch","","Read next batch of examples.",24,[[]]],[11,"get_next_batch_and_update","","",24,[[["model",6]]]],[11,"try_switch","","",24,[[]]],[11,"check_ess_blocking","","",24,[[]]],[11,"reset_scores","","",24,[[]]],[11,"is_empty","","",24,[[]]],[6,"RawTFeature","sparrow","",null,null],[6,"TFeature","","",null,null],[6,"TLabel","","",null,null],[6,"RawExample","","",null,null],[6,"Example","","",null,null],[17,"REGION","","",null,null],[17,"BUCKET","","",null,null],[11,"from","sparrow::commons::bins","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"try_into","","",0,[[],["result",4]]],[11,"from","sparrow::commons::channel","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"try_into","","",25,[[],["result",4]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"try_into","","",1,[[],["result",4]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"try_into","","",2,[[],["result",4]]],[11,"from","sparrow::commons::labeled_data","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"equivalent","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"from","sparrow::commons::packet","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"try_into","","",4,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"try_into","","",5,[[],["result",4]]],[11,"from","sparrow::commons::performance_monitor","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"try_into","","",6,[[],["result",4]]],[11,"from","sparrow::commons::tree","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"equivalent","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"try_into","","",8,[[],["result",4]]],[11,"from","sparrow::config","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"try_into","","",9,[[],["result",4]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"try_into","","",10,[[],["result",4]]],[11,"from","sparrow::master::model_manager::model_sync","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"try_into","","",13,[[],["result",4]]],[11,"from","sparrow::master::model_manager::model_sync::packet_stats","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"try_into","","",11,[[],["result",4]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"try_into","","",12,[[],["result",4]]],[11,"from","sparrow::master::model_manager::scheduler","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"try_into","","",14,[[],["result",4]]],[11,"from","sparrow::master::model_manager::scheduler::kdtree","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"try_into","","",15,[[],["result",4]]],[11,"from","sparrow::master::sampler::stratified_storage","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"equivalent","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"try_into","","",17,[[],["result",4]]],[11,"from","sparrow::master::sampler::stratified_storage::serial_storage","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"try_into","","",18,[[],["result",4]]],[11,"from","sparrow::scanner::booster","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"try_into","","",23,[[],["result",4]]],[11,"from","sparrow::scanner::booster::learner","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"try_into","","",19,[[],["result",4]]],[11,"from","sparrow::scanner::booster::learner_stats","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"try_into","","",20,[[],["result",4]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"try_into","","",21,[[],["result",4]]],[11,"from","sparrow::scanner::booster::tree_node","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"try_into","","",22,[[],["result",4]]],[11,"from","sparrow::scanner::buffer_loader","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"try_into","","",24,[[],["result",4]]],[11,"clone","sparrow::commons::bins","",0,[[],["bins",3]]],[11,"clone","sparrow::commons::channel","",1,[[],["sender",3]]],[11,"clone","","",2,[[],["receiver",3]]],[11,"clone","sparrow::commons::labeled_data","",3,[[],["labeleddata",3]]],[11,"clone","sparrow::commons::tree","",7,[[],["adtree",3]]],[11,"clone","","",8,[[],["updatelist",3]]],[11,"clone","sparrow::config","",10,[[],["samplemode",4]]],[11,"clone","sparrow::master::model_manager::model_sync::packet_stats","",12,[[],["updatespeed",4]]],[11,"clone","sparrow::master::sampler::stratified_storage","",16,[[],["f64",3]]],[11,"clone","sparrow::scanner::booster::learner_stats","",20,[[],["earlystoppingstatsatthreshold",3]]],[11,"eq","sparrow::commons::labeled_data","",3,[[["labeleddata",3]]]],[11,"eq","sparrow::commons::tree","",7,[[["adtree",3]]]],[11,"eq","sparrow::config","",10,[[["samplemode",4]]]],[11,"eq","sparrow::master::model_manager::model_sync::packet_stats","",12,[[["updatespeed",4]]]],[11,"eq","sparrow::master::sampler::stratified_storage","",16,[[["f64",3]]]],[11,"fmt","sparrow::commons::bins","",0,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::commons::labeled_data","",3,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::commons::packet","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::commons::performance_monitor","",6,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::commons::tree","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::config","",10,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::master::model_manager::model_sync::packet_stats","",12,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::master::sampler::stratified_storage::serial_storage","",18,[[["formatter",3]],["result",6]]],[11,"fmt","sparrow::master::sampler::stratified_storage","",16,[[["formatter",3]],["result",6]]],[11,"serialize","sparrow::commons::bins","",0,[[],["result",4]]],[11,"serialize","sparrow::commons::labeled_data","",3,[[],["result",4]]],[11,"serialize","sparrow::commons::packet","",4,[[],["result",4]]],[11,"serialize","sparrow::commons::tree","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","sparrow::config","",9,[[],["result",4]]],[11,"serialize","sparrow::master::sampler::stratified_storage","",16,[[],["result",4]]],[11,"serialize","sparrow::scanner::booster::learner_stats","",21,[[],["result",4]]],[11,"deserialize","sparrow::commons::bins","",0,[[],["result",4]]],[11,"deserialize","sparrow::commons::labeled_data","",3,[[],["result",4]]],[11,"deserialize","sparrow::commons::packet","",4,[[],["result",4]]],[11,"deserialize","sparrow::commons::tree","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","sparrow::config","",9,[[],["result",4]]],[11,"deserialize","sparrow::master::sampler::stratified_storage","",16,[[],["result",4]]],[11,"deserialize","sparrow::scanner::booster::learner_stats","",21,[[],["result",4]]]],"p":[[3,"Bins"],[3,"Sender"],[3,"Receiver"],[3,"LabeledData"],[3,"Packet"],[4,"PacketType"],[3,"PerformanceMonitor"],[3,"ADTree"],[3,"UpdateList"],[3,"Config"],[4,"SampleMode"],[3,"PacketStats"],[4,"UpdateSpeed"],[3,"ModelSync"],[3,"Scheduler"],[3,"KdTree"],[3,"F64"],[3,"StratifiedStorage"],[3,"SerialStorage"],[3,"Learner"],[3,"EarlyStoppingStatsAtThreshold"],[3,"EarlyStoppingIntermediate"],[3,"TreeNode"],[3,"Boosting"],[3,"BufferLoader"],[3,"ChannelMonitor"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);